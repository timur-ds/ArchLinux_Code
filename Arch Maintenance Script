#!/bin/bash
# ------------------------------------------------------------------------------
# –°–∫—Ä–∏–ø—Ç: arch_maintenance.sh
# –í–µ—Ä—Å–∏—è: 4.3.1
# ------------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Arch Linux —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞—É–¥–∏—Ç–æ–º, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏
#   —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
#     - –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ AUR-–ø–∞–∫–µ—Ç–æ–≤
#     - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
#     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è (TLP) –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ zram-generator
#     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ Btrfs, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
#     - –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∞—É–¥–∏—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
#     - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç: —Å–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞
#       –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—à–∏–≤–æ–∫ –∏ –ø–æ–∏—Å–∫ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
#     - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
#
# –ù–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è:
#   1. –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
#   2. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
#   3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç (—Å–µ—Ç—å,
#      —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, fwupd, –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã)
#   4. –ì–∏–±–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker
#   5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
#
set -eo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
declare -r TIMESTAMP=$(date +%Y%m%d_%H%M%S)
declare -r LOGDIR="/var/log/arch_maintenance"
declare -r LOGFILE="${LOGDIR}/maintenance_${TIMESTAMP}.log"
declare -r AUDIT_REPORT="${LOGDIR}/audit_${TIMESTAMP}.txt"
declare -ri MAX_LOG_DAYS=30
declare -ra DIAG_PKGS=(
    "dmidecode" "smartmontools" "lm_sensors" 
    "usbutils" "pciutils" "audit" "bash-completion"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[0;33m'
declare -r BLUE='\033[0;34m'
declare -r NC='\033[0m' # No Color

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
init_logging() {
    mkdir -p "$LOGDIR" || {
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–≥–æ–≤${NC}" >&2
        exit 1
    }
    
    exec > >(tee -a "$LOGFILE") 2> >(tee -a "$LOGFILE" >&2)
    
    # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
    find "$LOGDIR" -name "*.log" -mtime +$MAX_LOG_DAYS -delete
    find "$LOGDIR" -name "*.txt" -mtime +$MAX_LOG_DAYS -delete
    
    echo -e "${BLUE}=== –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: $(date) ===${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ sudo
check_privileges() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${YELLOW}‚ö† –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ sudo...${NC}"
        exec sudo -u root "$0" "$@"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫
install_packages() {
    local -a missing=()
    for pkg in "$@"; do
        pacman -Qi "$pkg" &>/dev/null || missing+=("$pkg")
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: ${missing[*]}${NC}"
        if ! pacman -S --noconfirm --needed "${missing[@]}"; then
            echo -e "${RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${missing[*]}${NC}" >&2
            exit 1
        fi
    fi
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
backup_configs() {
    local -r backup_dir="${LOGDIR}/backups_${TIMESTAMP}"
    mkdir -p "$backup_dir"
    
    declare -a critical_files=(
        "/etc/pacman.d/mirrorlist"
        "/etc/pacman.conf"
        "/etc/default/grub"
    )
    
    echo -e "${BLUE}üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    for file in "${critical_files[@]}"; do
        if [[ -f "$file" ]]; then
            cp -v "$file" "$backup_dir" >> "$LOGFILE"
        fi
    done
}

# –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (—è–¥—Ä–æ, –ø–∞–∫–µ—Ç—ã, AUR)
system_upgrade() {
    echo -e "${BLUE}‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª...${NC}"
    reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    
    echo -e "${BLUE}‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (pacman -Syu)...${NC}"
    pacman -Syu --noconfirm
    
    if command -v yay &>/dev/null; then
        echo -e "${BLUE}‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AUR (yay)...${NC}"
        sudo -u "${SUDO_USER:-$USER}" yay -Syu --devel --timeupdate --noconfirm
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
install_drivers_and_components() {
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤...${NC}"
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–∞–∫–µ—Ç iwlwifi-firmware —É–¥–∞–ª—ë–Ω, —Ç.–∫. —Ç–µ–ø–µ—Ä—å linux-firmware –≤–∫–ª—é—á–∞–µ—Ç –µ–≥–æ
    pacman -S --noconfirm --needed \
        intel-media-driver mesa vulkan-intel \
        xf86-input-wacom xf86-input-libinput \
        linux-firmware \
        bluez bluez-utils alsa-utils pulseaudio \
        zram-generator
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLP (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º)
configure_tlp() {
    echo -e "${BLUE}üîã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLP...${NC}"
    systemctl enable tlp.service
    tlp setcharge 75 80 BAT0
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ zram-generator
enable_zram() {
    echo -e "${BLUE}üíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ zram-generator...${NC}"
    systemctl enable systemd-zram-setup@zram0
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (ModemManager, bluetooth, tlp)...${NC}"
    systemctl restart ModemManager bluetooth tlp
}

# –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∏ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è Btrfs
btrfs_maintenance() {
    echo -e "${BLUE}üóúÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∏ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è Btrfs...${NC}"
    btrfs balance start / && btrfs filesystem defragment -r /
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å–∏—Å—Ç–µ–º—ã
refresh_keys() {
    echo -e "${BLUE}üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å–∏—Å—Ç–µ–º—ã...${NC}"
    pacman-key --refresh-keys
}

# –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ pacman
clean_cache() {
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ pacman (pacman -Sc)...${NC}"
    pacman -Sc --noconfirm
}

# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
reboot_message() {
    echo -e "${YELLOW}‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: sudo reboot${NC}"
}

# –§—É–Ω–∫—Ü–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
extra_update_maintenance() {
    install_drivers_and_components
    configure_tlp
    enable_zram
    restart_services
    btrfs_maintenance
    refresh_keys
    clean_cache
    reboot_message
}

# –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–∫–µ—à–∏, Docker, –∂—É—Ä–Ω–∞–ª—ã)
clean_system() {
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ pacman (paccache)...${NC}"
    paccache -rk5
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤...${NC}"
    journalctl --vacuum-time=4weeks
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ yay...${NC}"
    rm -rf /var/cache/yay/*
    
    if command -v docker &>/dev/null; then
        echo -e "${BLUE}üê≥ –ê–Ω–∞–ª–∏–∑ Docker...${NC}"
        local -ri running_containers
        running_containers=$(docker ps -q | wc -l)
        
        if [[ $running_containers -gt 0 ]]; then
            echo -e "${YELLOW}‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"
            read -rp "–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ? [y/N] " answer
            if [[ $answer =~ [Yy] ]]; then
                echo -e "${RED}‚ùå –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"
                exit 1
            fi
        fi
        
        echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ Docker...${NC}"
        docker system prune -af --volumes
    fi
}

# –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç
hardware_audit() {
    echo -e "${BLUE}üîç –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...${NC}"
    sensors-detect --auto >/dev/null 2>&1
    
    {
        echo -e "=== –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç ===\n"
        echo -e "‚óè –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏:\n$(dmidecode -t memory)"
        echo -e "\n‚óè –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π:"
        smartctl --scan | awk '{print $1}' | xargs -I{} sh -c '
            echo -e "\n‚ñ≤ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $1"; 
            smartctl -a "$1"
        ' _ {}
    } >> "$AUDIT_REPORT"
}

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_check() {
    echo -e "${BLUE}üîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...${NC}"
    {
        echo -e "=== –û—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===\n"
        echo -e "‚óè –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
        awk -F: '$3 >= 1000 {print $1}' /etc/passwd
        
        echo -e "\n‚óè –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:"
        find /etc -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \; 2>/dev/null
        
        if command -v auditctl &>/dev/null; then
            echo -e "\n‚óè –ü—Ä–∞–≤–∏–ª–∞ –∞—É–¥–∏—Ç–∞:\n$(auditctl -l)"
        else
            echo -e "\n‚óè Auditd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    } >> "$AUDIT_REPORT"
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç: —Å–µ—Ç—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–æ–∫, –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
network_audit() {
    echo -e "${BLUE}üîç –°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...${NC}"
    {
        echo -e "\n=== –°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===\n"
        echo "‚óè –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (ss -tulpn):"
        ss -tulpn
        echo -e "\n‚óè –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (ip a):"
        ip a
        echo -e "\n‚óè –ü–∏–Ω–≥ –¥–æ google.com:"
        ping -c 3 google.com
    } >> "$AUDIT_REPORT"
}

system_status() {
    echo -e "${BLUE}üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...${NC}"
    {
        echo -e "\n=== –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ===\n"
        echo "‚óè Uptime:"
        uptime
        echo -e "\n‚óè –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (free -h):"
        free -h
        echo -e "\n‚óè –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (systemctl --failed):"
        systemctl --failed || echo "–ù–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    } >> "$AUDIT_REPORT"
}

fw_update_check() {
    if command -v fwupdmgr &>/dev/null; then
        echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—à–∏–≤–æ–∫...${NC}"
        {
            echo -e "\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—à–∏–≤–æ–∫ (fwupd) ===\n"
            fwupdmgr refresh
            fwupdmgr get-updates
        } >> "$AUDIT_REPORT"
    else
        echo -e "${YELLOW}‚ö† fwupdmgr –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—à–∏–≤–æ–∫${NC}"
    fi
}

orphan_packages() {
    echo -e "${BLUE}üîç –ü–æ–∏—Å–∫ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    {
        echo -e "\n=== –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã ===\n"
        pacman -Qtdq || echo "–ù–µ—Ç –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤"
    } >> "$AUDIT_REPORT"
}

additional_audit() {
    network_audit
    system_status
    fw_update_check
    orphan_packages
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo -e "${BLUE}üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...${NC}"
    {
        echo -e "=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===\n"
        echo -e "‚óè –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:"
        grep -Pi 'error|warning|fail' "$LOGFILE" | sort | uniq -c | sed 's/^/  /'
        
        echo -e "\n‚óè –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤:"
        df -hT --exclude-type=tmpfs --exclude-type=devtmpfs | awk '
            NR==1 {print}
            $6 >= 80 {printf "\033[33m%s\033[0m\n", $0; next}
            {print}
        '
    } >> "$AUDIT_REPORT"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    init_logging
    check_privileges "$@"
    
    echo -e "${BLUE}üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...${NC}"
    install_packages "${DIAG_PKGS[@]}"
    backup_configs
    system_upgrade
    extra_update_maintenance
    clean_system
    hardware_audit
    security_check
    additional_audit
    generate_report
}

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
main "$@"

echo -e "\n${GREEN}‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $(date)${NC}"
echo -e "‚óè –õ–æ–≥–∏: ${BLUE}${LOGFILE}${NC}"
echo -e "‚óè –û—Ç—á–µ—Ç: ${BLUE}${AUDIT_REPORT}${NC}"
echo -e "‚óè –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:"
grep --color=auto -iP 'error|warning|fail' "$LOGFILE" | sort | uniq
