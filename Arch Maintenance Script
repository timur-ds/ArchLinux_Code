#!/bin/bash
#
# ------------------------------------------------------------------------------
# Скрипт: arch_maintenance.sh
#
# Назначение:
#   - Автоматизировать обслуживание Arch Linux:
#       1. Проверка и установка недостающих пакетов (от имени sudo).
#       2. Установка/обновление yay (AUR-хелпер) под обычным пользователем.
#       3. Обновление зеркал pacman (sudo reflector).
#       4. Обновление системы (sudo pacman -Syu) + обновление AUR (yay).
#       5. Очистка (осиротевшие пакеты, кеши pacman и yay, старые логи).
#       6. Проверка целостности пакетов, антивирусная проверка ClamAV.
#       7. Создание /forcefsck для проверки ФС при перезапуске.
#
# Инструкция по запуску:
#   1. Сохраните файл, например:
#        nano ~/arch_maintenance.sh
#   2. Сделайте его исполняемым:
#        chmod +x ~/arch_maintenance.sh
#   3. Запустите:
#        ./arch_maintenance.sh
#      При необходимости ввести пароль sudo для отдельных операций.
#
# Требования:
#   - Arch Linux (или совместимая система).
#   - Пользователь должен иметь права sudo.
#   - Пакеты, которые скрипт будет устанавливать, перечислены в массиве NEEDED_PKGS.
#
# ------------------------------------------------------------------------------
set -euo pipefail  # Строгий режим: выходим при ошибке или использовании неинициализированной переменной

# 1. Формируем путь к лог-файлу и перенаправляем вывод в него.
LOGFILE="$HOME/arch_maintenance_$(date +%Y-%m-%d_%H-%M-%S).log"
exec > >(tee -a "$LOGFILE") 2>&1

echo "=== [$(date)] Начало скрипта обслуживания Arch Linux (под обычным пользователем) ==="
echo "Лог сохраняется в: $LOGFILE"

# ------------------------------------------------------------------------------
# 2. Список пакетов, которые вы хотите гарантированно иметь в системе
# ------------------------------------------------------------------------------
NEEDED_PKGS=(
  "reflector"       # обновление списка зеркал
  "pacman-contrib"  # paccache, checkupdates и т.п.
  "clamav"          # антивирус (clamscan, freshclam)
  "base-devel"      # инструменты сборки (make, gcc) — нужны для AUR
)

# ------------------------------------------------------------------------------
# 3. Проверка / Установка недостающих пакетов (через sudo)
# ------------------------------------------------------------------------------
echo "=== Проверяем и при необходимости устанавливаем пакеты через sudo pacman -S ==="
MISSING_PKGS=()
for pkg in "${NEEDED_PKGS[@]}"; do
  # pacman -Q pkg возвращает 0, если pkg установлен, иначе 1
  if ! pacman -Q "$pkg" &>/dev/null; then
    MISSING_PKGS+=("$pkg")
  fi
done

if [[ ${#MISSING_PKGS[@]} -gt 0 ]]; then
  echo "Не хватает пакетов: ${MISSING_PKGS[*]}"
  sudo pacman -S --noconfirm "${MISSING_PKGS[@]}"
else
  echo "Все обязательные пакеты из списка уже установлены."
fi

# ------------------------------------------------------------------------------
# 4. Проверка наличия yay (AUR-хелпер). Если нет — собираем под текущим пользователем
# ------------------------------------------------------------------------------
if ! command -v yay &>/dev/null; then
  echo "=== yay не найден, собираем из AUR под обычным пользователем... ==="
  tmp_dir=$(mktemp -d)
  git clone https://aur.archlinux.org/yay.git "$tmp_dir/yay"
  pushd "$tmp_dir/yay" >/dev/null
  # Важно: сборка под обычным пользователем (makepkg от root не работает)
  makepkg -si --noconfirm
  popd >/dev/null
  rm -rf "$tmp_dir"
else
  echo "yay уже установлен."
fi

# ------------------------------------------------------------------------------
# 5. Обновление списка зеркал (reflector) через sudo
# ------------------------------------------------------------------------------
if command -v reflector &>/dev/null; then
  echo "=== Обновляем список зеркал (sudo reflector) ==="
  sudo reflector --latest 10 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
fi

# ------------------------------------------------------------------------------
# 6. Обновление системы (официальные репозитории + AUR)
# ------------------------------------------------------------------------------
echo "=== Обновляем систему (sudo pacman -Syu) ==="
sudo pacman -Syu --noconfirm

if command -v yay &>/dev/null; then
  echo "=== Обновляем пакеты из AUR (yay) ==="
  # yay запускается под текущим пользователем (уже не sudo).
  yay -Syu --devel --timeupdate
fi

# ------------------------------------------------------------------------------
# 7. Очистка системы
# ------------------------------------------------------------------------------
echo "=== Удаляем осиротевшие пакеты (sudo pacman -Rns) ==="
orphans=$(pacman -Qdtq || true)
if [[ -n "$orphans" ]]; then
  echo "Осиротевшие пакеты: $orphans"
  sudo pacman -Rns --noconfirm $orphans
else
  echo "Осиротевших пакетов не найдено."
fi

echo "=== Очищаем кеш pacman (sudo paccache -rk2) ==="
sudo paccache -rk2

# Если yay установлен, вычистим кеш AUR
if command -v yay &>/dev/null; then
  echo "=== Удаляем неиспользуемые AUR-зависимости (yay -Yc) ==="
  yay -Yc --noconfirm
  echo "=== Очищаем кэш AUR (yay -Sc) ==="
  yay -Sc --noconfirm
fi

echo "=== Сокращаем системные логи старше 2 недель (sudo journalctl --vacuum-time=2weeks) ==="
sudo journalctl --vacuum-time=2weeks

# ------------------------------------------------------------------------------
# 8. Проверка целостности пакетов (pacman -Qk)
# ------------------------------------------------------------------------------
echo "=== Проверка целостности пакетов (pacman -Qk) ==="
pacman -Qk

# ------------------------------------------------------------------------------
# 9. Антивирусная проверка (ClamAV)
# ------------------------------------------------------------------------------
if command -v clamscan &>/dev/null; then
  echo "=== Обновляем базы ClamAV (sudo freshclam) и сканируем (clamscan) ==="
  sudo freshclam
  # Сканируем от обычного пользователя (root не обязателен),
  # исключаем системные виртуальные директории:
  clamscan -r --bell -i \
    --exclude-dir="^/proc" \
    --exclude-dir="^/sys" \
    --exclude-dir="^/dev" \
    /
fi

# ------------------------------------------------------------------------------
# 10. Принудительная проверка ФС (sudo touch /forcefsck)
# ------------------------------------------------------------------------------
echo "=== Создаём /forcefsck для проверки ФС при перезапуске (sudo touch) ==="
sudo touch /forcefsck

# ------------------------------------------------------------------------------
# Завершение
# ------------------------------------------------------------------------------
echo "=== [$(date)] Обслуживание Arch Linux завершено. Лог: $LOGFILE ==="

# Если пользователь имеет пакет libnotify, выводим уведомление
if command -v notify-send &>/dev/null; then
  notify-send "Arch Maintenance" "Скрипт завершён. Лог: $LOGFILE"
fi
