#!/bin/bash
#
# ------------------------------------------------------------------------------
# Скрипт: arch_maintenance.sh
#
# Назначение:
#   - Автоматизировать обслуживание Arch Linux:
#       1. Проверка и установка недостающих пакетов (от имени sudo).
#       2. Установка/обновление yay (AUR-хелпер) под обычным пользователем.
#       3. Обновление зеркал pacman (sudo reflector).
#       4. Обновление системы (sudo pacman -Syu) + обновление AUR (yay).
#       5. Очистка (осиротевшие пакеты, кеши pacman и yay, старые логи).
#       6. Проверка целостности пакетов, антивирусная проверка ClamAV.
#       7. Создание /forcefsck для проверки ФС при перезапуске.
#
# Инструкция по запуску:
#   1. Сохраните файл, например:
#        nano ~/arch_maintenance.sh
#   2. Сделайте его исполняемым:
#        chmod +x ~/arch_maintenance.sh
#   3. Запустите:
#        ./arch_maintenance.sh
#      При необходимости ввести пароль sudo для отдельных операций.
#
# Требования:
#   - Arch Linux (или совместимая система).
#   - Пользователь должен иметь права sudo.
#   - Пакеты, которые скрипт будет устанавливать, перечислены в массиве NEEDED_PKGS.
#
# ------------------------------------------------------------------------------
#!/bin/bash
#
# ------------------------------------------------------------------------------
# Скрипт: arch_maintenance.sh
# Версия: 2.0
# ------------------------------------------------------------------------------
set -euo pipefail

# Проверка прав администратора
if [[ $EUID -ne 0 ]]; then
    echo "Перезапуск скрипта с правами root..."
    exec sudo "$0" "$@"
    exit 1
fi

# Логирование
LOGFILE="$HOME/arch_maintenance_$(date +%Y-%m-%d_%H-%M-%S).log"
exec > >(tee -a "$LOGFILE") 2>&1

echo "=== [$(date)] Начало скрипта обслуживания Arch Linux ==="
echo "Лог сохраняется в: $LOGFILE"

# ------------------------------------------------------------------------------
# 1. Обязательные пакеты (включая git)
# ------------------------------------------------------------------------------
NEEDED_PKGS=(
    "git"            # для работы с AUR
    "reflector"      # обновление зеркал
    "pacman-contrib" # утилиты pacman
    "clamav"         # антивирус
    "base-devel"     # сборка пакетов
)

# ------------------------------------------------------------------------------
# 2. Автоматическая установка недостающих пакетов
# ------------------------------------------------------------------------------
install_missing() {
    local missing=()
    for pkg in "$@"; do
        if ! pacman -Q "$pkg" &>/dev/null; then
            missing+=("$pkg")
        fi
    done
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo "Устанавливаем: ${missing[*]}"
        pacman -S --noconfirm "${missing[@]}"
    fi
}

echo "=== Проверка и установка зависимостей ==="
install_missing "${NEEDED_PKGS[@]}"

# ------------------------------------------------------------------------------
# 3. Установка/обновление yay (AUR-хелпер)
# ------------------------------------------------------------------------------
if ! command -v yay &>/dev/null; then
    echo "=== Установка yay из AUR ==="
    tmp_dir=$(mktemp -d)
    git clone https://aur.archlinux.org/yay.git "$tmp_dir/yay"
    pushd "$tmp_dir/yay" >/dev/null
    makepkg -si --noconfirm
    popd >/dev/null
    rm -rf "$tmp_dir"
fi

# ------------------------------------------------------------------------------
# 4. Основные этапы обслуживания
# ------------------------------------------------------------------------------
echo "=== Обновление зеркал ==="
reflector --latest 10 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

echo "=== Обновление системы ==="
pacman -Syu --noconfirm

echo "=== Обновление AUR-пакетов ==="
if command -v yay &>/dev/null; then
    yay -Syu --timeupdate --noconfirm
fi

echo "=== Очистка системы ==="
paccache -rk2
if command -v yay &>/dev/null; then
    yay -Yc --noconfirm
    yay -Sc --noconfirm
fi
journalctl --vacuum-time=2weeks

echo "=== Проверка целостности пакетов ==="
pacman -Qk || true

echo "=== Антивирусная проверка (домашняя директория) ==="
if command -v clamscan &>/dev/null; then
    freshclam
    clamscan -r --bell -i "$HOME" \
        --exclude-dir="^/proc" \
        --exclude-dir="^/sys" \
        --exclude-dir="^/dev"
fi

echo "=== Принудительная проверка ФС при перезагрузке ==="
touch /forcefsck

# ------------------------------------------------------------------------------
echo "=== [$(date)] Обслуживание завершено ==="
